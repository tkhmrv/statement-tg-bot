import os
import logging
import asyncio
import httpx
from dotenv import load_dotenv
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    Application,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# Flask –¥–ª—è webhook –∏ ping
flask_app = Flask(__name__)

@flask_app.route("/ping", methods=["GET"])
def ping():
    return "pong", 200

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# === Telegram Handlers ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    full_name = f"{user.first_name} {user.last_name or ''}".strip()
    logging.info(f"/start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {full_name} (id={user.id})")

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {full_name}!\n\n"
        f"–≠—Ç–æ –±–æ—Ç —Ñ–æ—Ç–æ—Å—Ç—É–¥–∏–∏ Statement. –Ø —É–º–µ—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–¥–±–µ–∫ —Å —Å–∞–π—Ç–∞ –≤ Telegram-–≥—Ä—É–ø–ø—ã.\n"
        f"–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ.",
        reply_markup=ReplyKeyboardRemove()
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    chat_id = chat.id
    chat_title = chat.title or f"{chat.first_name} {chat.last_name or ''}".strip()
    logging.info(f"/status –≤ —á–∞—Ç–µ {chat_title} (id={chat_id})")

    await update.message.reply_text(
        f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π —á–∞—Ç:\n\n"
        f"- –ù–∞–∑–≤–∞–Ω–∏–µ: *{chat_title}*\n"
        f"- ID: `{chat_id}`",
        parse_mode="Markdown"
    )

async def send_activation_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type == "private":
        logging.warning(f"üö´ –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ (id={chat.id}) –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        await update.message.reply_text("‚ö†Ô∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    chat_id = chat.id
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data=f"start_bot:{chat_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    logging.info(f"üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ —á–∞—Ç (id={chat_id})")

    await context.bot.send_message(
        chat_id=chat_id,
        text="üëã –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat = update.effective_chat
    chat_id = chat.id
    chat_title = chat.title or f"{chat.first_name} {chat.last_name or ''}".strip()
    logging.info(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ {chat_title} (id={chat_id})")

    await query.edit_message_text(
        f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞!\n\n"
        f"- –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: *{chat_title}*\n"
        f"- ID: `{chat_id}`\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏ ID –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Ö –≤ –∞–¥–º–∏–Ω–∫—É —Å–∞–π—Ç–∞.",
        parse_mode="Markdown"
    )

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands = [
        ("/start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        ("/status", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"),
        ("/activate", "–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø)"),
        ("/menu", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    ]
    text = "\U0001F4DD –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" + "\n".join([f"{cmd} ‚Äî {desc}" for cmd, desc in commands])
    await update.message.reply_text(text)

async def set_commands(app: Application):
    commands = [
        BotCommand("start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        BotCommand("status", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"),
        BotCommand("activate", "–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø)"),
        BotCommand("menu", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    ]
    await app.bot.set_my_commands(commands)

# –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async def wait_for_server_ready(url, timeout=30):
    for i in range(timeout):
        try:
            async with httpx.AsyncClient() as client:
                r = await client.get(f"{url}/ping", timeout=3)
                if r.status_code == 200 and "pong" in r.text.lower():
                    logging.info("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É webhook.")
                    return
        except Exception:
            pass
        logging.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞... ({i+1}/{timeout})")
        await asyncio.sleep(1)
    raise TimeoutError("‚õî –°–µ—Ä–≤–µ—Ä —Ç–∞–∫ –∏ –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è Telegram")

# === Main run ===

async def main():
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (webhook)...")

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    await set_commands(app)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("activate", send_activation_button))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(button_handler))

    # Webhook-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    async def webhook_handler_async(request_data):
        update = Update.de_json(request_data.decode("utf-8"), app.bot)
        await app.process_update(update)
        return "OK", 200

    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è webhook-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    def webhook_handler():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            request_data = request.get_data()
            return loop.run_until_complete(webhook_handler_async(request_data))
        finally:
            loop.close()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ Flask
    flask_app.add_url_rule(WEBHOOK_PATH, "webhook", webhook_handler, methods=["POST"])

    # –°—Ç–∞—Ä—Ç—É–µ–º Flask –≤ —Ñ–æ–Ω–µ
    port = int(os.environ.get("PORT", 3000))
    loop = asyncio.get_event_loop()
    loop.run_in_executor(None, lambda: flask_app.run(host="0.0.0.0", port=port))

    # –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
    await wait_for_server_ready(WEBHOOK_HOST)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    await app.bot.delete_webhook(drop_pending_updates=True)
    await app.bot.set_webhook(url=WEBHOOK_URL)
    logging.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø–∞—É–∑–∞ ‚Äî —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
    while True:
        await asyncio.sleep(3600)

# –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main
if __name__ == "__main__":
    asyncio.run(main())