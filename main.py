from ping_server import start_ping_server
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from dotenv import load_dotenv

start_ping_server()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    full_name = f"{user.first_name} {user.last_name or ''}".strip()

    logging.info(f"/start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {full_name} (id={user.id})")

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {full_name}!\n\n"
        f"–≠—Ç–æ –±–æ—Ç —Ñ–æ—Ç–æ—Å—Ç—É–¥–∏–∏ Statement. –Ø —É–º–µ—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–¥–±–µ–∫ —Å —Å–∞–π—Ç–∞ –≤ Telegram-–≥—Ä—É–ø–ø—ã.\n"
        f"–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ.",
        reply_markup=ReplyKeyboardRemove()
    )

# /status ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    chat_id = chat.id
    chat_title = chat.title or f"{chat.first_name} {chat.last_name or ''}".strip()

    logging.info(f"/status –≤ —á–∞—Ç–µ {chat_title} (id={chat_id})")

    await update.message.reply_text(
        f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π —á–∞—Ç:\n\n"
        f"- –ù–∞–∑–≤–∞–Ω–∏–µ: *{chat_title}*\n"
        f"- ID: `{chat_id}`",
        parse_mode="Markdown"
    )

# /activate ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø)
async def send_activation_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat

    if chat.type == "private":
        logging.warning(f"üö´ –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ (id={chat.id}) –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        await update.message.reply_text("‚ö†Ô∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    chat_id = chat.id
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data=f"start_bot:{chat_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    logging.info(f"üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ —á–∞—Ç (id={chat_id})")

    await context.bot.send_message(
        chat_id=chat_id,
        text="üëã –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat = update.effective_chat
    chat_id = chat.id
    chat_title = chat.title or f"{chat.first_name} {chat.last_name or ''}".strip()

    logging.info(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ {chat_title} (id={chat_id})")

    await query.edit_message_text(
        f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞!\n\n"
        f"- –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: *{chat_title}*\n"
        f"- ID: `{chat_id}`\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏ ID –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Ö –≤ –∞–¥–º–∏–Ω–∫—É —Å–∞–π—Ç–∞.",
        parse_mode="Markdown"
    )

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def set_commands(app):
    commands = [
        BotCommand("start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        BotCommand("status", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"),
        BotCommand("activate", "–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø)"),
        BotCommand("menu", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    ]
    await app.bot.set_my_commands(commands)

# /menu ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands = [
        ("/start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        ("/status", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"),
        ("/activate", "–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø)"),
        ("/menu", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    ]
    text = "\U0001F4DD –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" + "\n".join([f"{cmd} ‚Äî {desc}" for cmd, desc in commands])
    await update.message.reply_text(text)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    app = ApplicationBuilder().token(BOT_TOKEN).post_init(set_commands).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("activate", send_activation_button))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(button_handler))

    logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç –∫–æ–º–∞–Ω–¥—ã.")
    app.run_polling()
